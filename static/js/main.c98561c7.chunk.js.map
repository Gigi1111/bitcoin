{"version":3,"sources":["data.js","App.js","serviceWorker.js","index.js"],"names":["Data","props","state","chartData","currentRate","datesFormatted","getPass14DatesFormatted","Date","this","getCurrent","getChartData","s","str","split","m","d","Number","dateArr","rateArr","fetch","length","then","response","json","obj","i","push","formatChartDate","bpi","EUR","rate","setState","today","getDateFormatted","t","r","indexOf","filter","a","join","parseFloat","labels","datasets","lable","data","array","dYear","getFullYear","dMonth","getMonth","dDate","getDate","dFormatted","n","start","startYear","startMonth","startDate","className","width","height","options","title","display","displayTitle","text","fontSize","bezierCurve","elements","line","tension","legend","displayLegend","position","legendPosition","React","Component","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c98561c7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nclass Data extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tchartData: {},\r\n\t\t\tcurrentRate: 0\r\n\t\t};\r\n\r\n\t\tthis.state.datesFormatted = this.getPass14DatesFormatted(new Date());\r\n\t}\r\n\tcomponentWillMount() {\r\n\t\tthis.getCurrent();\r\n\t\tthis.getChartData();\r\n\t}\r\n\tformatChartDate(s) {\r\n\t\tlet months = [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ];\r\n\r\n\t\tlet str = s.split('');\r\n\t\tlet m = str[5] + str[6];\r\n\t\tlet d = str[8] + str[9];\r\n\r\n\t\treturn months[Number(m) - 1] + ' ' + Number(d);\r\n\t}\r\n\tasync getChartData() {\r\n\t\tlet dateArr = [];\r\n\t\tlet rateArr = [];\r\n\r\n\t\tlet data = await fetch(\r\n\t\t\t`https://api.coindesk.com/v1/bpi/historical/close.json?currency=EUR&start=${this.state\r\n\t\t\t\t.datesFormatted[0]}&end=${this.state.datesFormatted[this.state.datesFormatted.length - 1]}`\r\n\t\t)\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((obj) => {\r\n\t\t\t\tfor (let i = 0; i < this.state.datesFormatted.length; i++) {\r\n\t\t\t\t\tdateArr.push(this.formatChartDate(this.state.datesFormatted[i]));\r\n\t\t\t\t\trateArr.push(obj.bpi[this.state.datesFormatted[i]]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\tlet i;\r\n\t\tlet todayData = await fetch('https://api.coindesk.com/v1/bpi/currentprice.json')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((obj) => {\r\n\t\t\t\ti = obj.bpi.EUR.rate;\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttoday: this.getDateFormatted(new Date(), 0),\r\n\t\t\t\t\tcurrentRate: obj.bpi.EUR.rate\r\n\t\t\t\t});\r\n\t\t\t\tlet t = this.formatChartDate(this.getDateFormatted(new Date(), 0));\r\n\t\t\t\tlet r = obj.bpi.EUR.rate || this.state.currentRate;\r\n\t\t\t\tif (r.indexOf(',')) {\r\n\t\t\t\t\tr = r.split('').filter((a) => a !== ',').join('');\r\n\t\t\t\t}\r\n\t\t\t\tdateArr.push(t);\r\n\t\t\t\trateArr.push(parseFloat(r));\r\n\t\t\t});\r\n\r\n\t\tthis.setState({\r\n\t\t\tchartData: {\r\n\t\t\t\tlabels: dateArr,\r\n\t\t\t\tdatasets: [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlable: 'rate',\r\n\t\t\t\t\t\tdata: rateArr\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tgetPass14DatesFormatted(today) {\r\n\t\tlet array = [];\r\n\t\tfor (let i = 13; i >= 1; i--) {\r\n\t\t\tlet d = today - 1000 * 60 * 60 * 24 * i;\r\n\t\t\td = new Date(d);\r\n\t\t\tlet dYear = d.getFullYear();\r\n\t\t\tlet dMonth = d.getMonth() + 1; //getMonth returns 0-11\r\n\t\t\tlet dDate = d.getDate();\r\n\t\t\tlet dFormatted =\r\n\t\t\t\tdYear + '-' + (dMonth >= 10 ? dMonth : '0' + dMonth) + '-' + (dDate >= 10 ? dDate : '0' + dDate);\r\n\r\n\t\t\tarray.push(dFormatted);\r\n\t\t}\r\n\r\n\t\treturn array;\r\n\t}\r\n\tgetDateFormatted(today, n) {\r\n\t\tlet start = today - 1000 * 60 * 60 * 24 * n;\r\n\t\tstart = new Date(start);\r\n\t\tlet startYear = start.getFullYear();\r\n\t\tlet startMonth = start.getMonth() + 1; //getMonth returns 0-11\r\n\t\tlet startDate = start.getDate();\r\n\t\tlet startFormatted =\r\n\t\t\tstartYear +\r\n\t\t\t'-' +\r\n\t\t\t(startMonth >= 10 ? startMonth : '0' + startMonth) +\r\n\t\t\t'-' +\r\n\t\t\t(startDate >= 10 ? startDate : '0' + startDate);\r\n\r\n\t\treturn startFormatted;\r\n\t}\r\n\r\n\tasync getCurrent() {\r\n\t\tvar d = new Date();\r\n\r\n\t\tlet t;\r\n\t\tlet r;\r\n\t\treturn await fetch('https://api.coindesk.com/v1/bpi/currentprice.json')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((obj) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\ttoday: this.getDateFormatted(new Date(), 0),\r\n\t\t\t\t\tcurrentRate: obj.bpi.EUR.rate\r\n\t\t\t\t});\r\n\t\t\t\tt = this.formatChartDate(this.getDateFormatted(new Date(), 0));\r\n\t\t\t\tr = obj.bpi.EUR.rate;\r\n\t\t\t});\r\n\t}\r\n\r\n\tstatic defaultProps = {\r\n\t\tdisplayTitle: true,\r\n\t\tdisplayLegend: true,\r\n\t\tlegendPosition: 'right'\r\n\t};\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"data\">\r\n\t\t\t\t<Line\r\n\t\t\t\t\twidth={600}\r\n\t\t\t\t\theight={250}\r\n\t\t\t\t\tdata={this.state.chartData}\r\n\t\t\t\t\toptions={{\r\n\t\t\t\t\t\ttitle: {\r\n\t\t\t\t\t\t\tdisplay: this.props.displayTitle,\r\n\t\t\t\t\t\t\ttext: `Bitcoin Price Index(EUR)currrent:â‚¬${this.state.currentRate}`,\r\n\t\t\t\t\t\t\tfontSize: 25\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tbezierCurve: false,\r\n\t\t\t\t\t\telements: {\r\n\t\t\t\t\t\t\tline: {\r\n\t\t\t\t\t\t\t\ttension: 0.1\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tlegend: {\r\n\t\t\t\t\t\t\tdisplay: this.props.displayLegend,\r\n\t\t\t\t\t\t\tposition: this.props.legendPosition\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Data;\r\n","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Data from './data';\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Data legendPosition=\"bottom\" />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}